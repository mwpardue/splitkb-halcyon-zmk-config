/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define FUN_L 4


#undef EXCL
#define EXCL LS(N1)
#undef AT
#define AT LS(N2)
#undef HASH
#define HASH LS(N3)
#undef DOLLAR
#define DOLLAR LS(N4)
#undef PERCENT
#define PERCENT LS(N5)
#undef CARET
#define CARET LS(N6)
#undef AMPS
#define AMPS LS(N7)
#undef STAR
#define STAR LS(N8)
#undef LEFT_PARENTHESIS
#define LEFT_PARENTHESIS LS(N9)
#undef COLON
#define COLON LS(SEMI)
#undef LEFT_BRACE
#define LEFT_BRACE LS(LBKT)
#undef RIGHT_BRACE
#define RIGHT_BRACE LS(RBKT)
#undef UNDS
#define UNDS LS(MINUS)
#undef PIPE
#define PIPE LS(BSLH)
#undef DQT
#define DQT LS(SINGLE_QUOTE)
#undef PLUS
#define PLUS LS(EQUAL)
#undef LT
#define LT LS(COMMA)
#undef GT
#define GT LS(DOT)

#undef TAB_LEFT
#define TAB_LEFT LG(H)
#undef TAB_RGHT
#define TAB_RGHT LG(L)
#undef MON_LEFT
#define MON_LEFT LA(H)
#undef MON_RGHT
#define MON_RGHT LA(L)
#undef MON_DOWN
#define MON_DOWN LA(J)
#undef SPC_LEFT
#define SPC_LEFT LC(LA(LEFT_ARROW))
#undef SPC_RGHT
#define SPC_RGHT LC(LA(RIGHT_ARROW))
#undef WDW_LEFT
#define WDW_LEFT LA(LEFT_ARROW)
#undef WDW_RGHT
#define WDW_RGHT LA(RIGHT_ARROW)
#undef SCRL_UP
#define SCRL_UP LA(LG(LC(UP_ARROW)))
#undef SCRL_DN
#define SCRL_DN LA(LG(LC(DOWN_ARROW)))
#undef HYPR
#define HYPR LC(LA(LS(LGUI)))
#undef MEH
#define MEH LA(LS(LCTRL))
#undef LSTHUMB
#define LSTHUMB lscw
#undef RSTHUMB
#define RSTHUMB rscw

#define LEFT_ALPHAS 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29
#define RIGHT_ALPHAS 6 7 8 9 10 18 19 20 21 22 34 35 36 37 38

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {

        lhm: left_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_ALPHAS>;
            hold-trigger-on-release;
        };

        rhm: right_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_ALPHAS>;
            hold-trigger-on-release;
        };

        lshm: left_hand_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_ALPHAS>;
            hold-trigger-on-release;
        };

        rshm: right_hand_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_ALPHAS>;
            hold-trigger-on-release;
        };

        lhp: left_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOLD_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_ALPHAS>;
            hold-trigger-on-release;
        };

        rhp: right_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGH_HOLD_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_ALPHAS>;
            hold-trigger-on-release;
        };

        ltt: layer_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        lslm: left_hand_lower_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_LOWER_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_ALPHAS>;
            hold-trigger-on-release;
        };

        rslm: right_hand_lower_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_LOWER_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_ALPHAS>;
            hold-trigger-on-release;
        };

    tap_dances {
       shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		display-name = "Shift/CapsWord";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};

        tdpaste: tap_dance_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PASTE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mt LG(LA(LS(LC(V)))) LG(V)>, <&kp LG(LC(V))>;
        };

        tdcopy: tap_dance_copy {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COPY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt LG(X) LG(C)>, <&trans>;
        };

        tdsshot: tap_dance_screenshot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SCREENSHOT";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt LG(LS(N3)) LG(LS(LC(N3)))>, <&trans>;
        };

        tdssnip: tap_dance_screensnip {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SCREENSNIP";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt LG(LS(N4)) LG(LS(LC(N4)))>, <&trans>;
        };

        tips: tips {
            label = "TIPS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LSHIFT &kp T &kp R &kp U &kp E &kp I &kp P &kp S &kp O &kp L &kp U &kp T &kp I &kp O &kp N &kp S &kp DOT &kp C &kp O &kp M>
                ;
          };

        pass: pass {
            label = "Pass";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LSFT>
                , <&macro_tap &kp M> 
                , <&macro_release &kp LSFT>
                , <&macro_tap &kp AT &kp T &kp T &kp H &kp E &kp W &kp N6 &kp N7 &kp N8 &kp N6 &kp RET>
                ;
          };

    };

    combos {
        compatible = "zmk,combos";


    combo_esc {
      timeout-ms = <50>;
      key-positions = <14 15>;
      bindings = <&kp ESC>;
      require-prior-idle-ms = <250>;
      layers = <BAS_L>;
  };

    combo_play {
      timeout-ms = <50>;
      key-positions = <26 27 28>;
      bindings = <&kp C_PLAY_PAUSE>;
      require-prior-idle-ms = <250>;
      layers = <BAS_L>;
  };

    combo_prev {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp C_PREV>;
      require-prior-idle-ms = <250>;
      layers = <BAS_L>;
  };

    combo_next {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&kp C_NEXT>;
      require-prior-idle-ms = <250>;
      layers = <BAS_L>;
  };

    combo_pass {
      timeout-ms = <50>;
      key-positions = <14 15 43>;
      bindings = <&pass>;
      require-prior-idle-ms = <250>;
      layers = <BAS_L>;
  };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  0   |   1  |   2  |   3   |   4   |   5   |                                  |   6   |   7   |   8    |   9   |   10   |   11  |
            // | 12   |  13  |  14  |  15   |  16   |  17   |                                  |  18   |  19   |  20    |  21   |   22   |   23  |
            // | 24   |  25  |  26  |  27   |  28   |  29   |  30  |   31   |  |   32   |  33  |  34   |  35   |  36    |  37   |   38   |   39  |
            //                     | 40     |  41   |  42   |  43  |   44   |  |   45   |  46  |  47   |  48   | 49     |
            bindings = <
            &kp ESC     &kp Q        &kp W       &kp E         &kp R       &kp T                                                                       &kp Y     &kp U       &kp I         &kp O       &kp P           &kp MINUS
            &kp TAB     &lhm LCTRL A &lhm LALT S &lshm LSHFT D &lhm LGUI F &kp G                                                                       &kp H     &rhm RGUI J &rshm RSHFT K &rhm RALT L &rhm RCTRL SEMI &kp QUOT
            &bootloader &ltt NUM_L Z &kp X       &kp C         &kp V       &kp B     &kp LSHFT       &mo FUN_L             &mo FUN_L      &kp LSHFT         &kp N     &kp M       &kp COMMA     &kp DOT     &kp FSLH        &bootloader
                                                    &studio_unlock &kp DEL &mo NAV_L &ltt NAV_L BSPC &lhp LSHFT RET        &rhp RSHFT RET &ltt SYM_L SPACE  &mo NUM_L &kp BSPC    &kp RALT
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        nav_layer {
            label = "Nav";
            bindings = <
            &trans &trans    &trans   &trans    &trans   &trans                                   &trans   &trans       &trans       &trans       &trans &trans
            &trans &sk LCTRL &sk LALT &sk LSHFT &sk LGUI &trans                                   &kp LEFT &kp DOWN     &kp UP       &kp RIGHT    &trans &trans
            &trans &trans    &trans   &tdcopy   &tdpaste &trans &trans &trans      &trans &trans  &trans   &kp MON_LEFT &kp MON_DOWN &kp MON_RGHT &trans &trans
                                       &trans   &trans   &trans &trans &trans      &trans &kp RET &trans   &trans       &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
            &trans &trans    &trans   &trans    &trans   &trans                                 &kp GRAVE &kp N7 &kp N8 &kp N9 &kp COLON &trans
            &trans &sk LCTRL &sk LALT &sk LSHFT &sk LGUI &trans                                 &kp MINUS &kp N4 &kp N5 &kp N6 &kp DOT   &kp COLON
            &trans &trans    &trans   &trans    &trans   &trans &trans &trans     &trans &trans &kp EQUAL &kp N1 &kp N2 &kp N3 &kp FSLH  &trans
                                      &trans    &trans   &trans &trans &trans     &trans &kp N0 &trans &trans &trans
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
            &bootloader &trans &trans   &kp LBKT &kp RBKT &tips                                     &trans &kp AMPS   &kp STAR    &kp LPAR  &trans &bootloader
            &trans      &kp AT &kp BSLH &kp LPAR &kp RPAR &kp UNDS                                  &trans &kp DOLLAR &kp PERCENT &kp CARET &trans &trans
            &trans      &trans &trans   &kp LBRC &kp RBRC &trans &trans &trans     &trans &trans    &trans &kp EXCL   &kp AT      &kp HASH  &trans &trans
                                        &trans   &trans   &trans &trans &trans     &trans  &trans   &trans &trans     &trans
            >;
        };

        function_layer {
            label = "Function";
            bindings = <
            &bootloader &trans &trans &trans &trans &trans                                  &trans &kp C_PREV &kp C_VOL_DN     &kp C_VOL_UP &kp C_NEXT &bootloader
            &trans      &trans &trans &trans &trans &trans                                  &trans &trans     &trans           &trans       &trans     &trans
            &trans      &trans &trans &trans &trans &trans &trans &trans     &trans &trans  &trans &trans     &kp C_PLAY_PAUSE &kp C_MUTE   &trans     &trans
                                      &trans &trans &trans &trans &trans     &trans  &trans &trans &trans     &trans
            >;
        };

	/*
	res_layer1 { status = "reserved"; };
	res_layer2 { status = "reserved"; };
	res_layer3 { status = "reserved"; };
	res_layer4 { status = "reserved"; };
	*/
#if 0
        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |
            bindings = <
            &bootloader &trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2              &trans &trans &trans &trans &trans &bootloader
            &trans &trans &trans     &bt BT_SEL 3 &bt BT_SEL 4 &trans                    &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans &trans
                                 &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
#endif
    };
};
